pragma solidity >=0.5.0;

import "../../GSN/Context.sol";
import "../Roles.sol";

contract MainAdminRole is Context {
    using Roles for Roles.Role;

    event MainAdminAdded(address indexed account, string indexed role);

    Roles.Role private _mainadmin;

    string constant _role = 'Главный администратор';

    constructor () internal {
        _addMainAdmin(_msgSender());
    }

    modifier onlyMainAdmin() {
        require(isMainAdmin(_msgSender()), "MainAdminRole: caller does not have the MainAdmin role");
        _;
    }

    function isMainAdmin(address account) public view returns (bool) {
        return _mainadmin.has(account);
    }

    function addMainAdmin(address account) public onlyMainAdmin {
        _addMainAdmin(account, _role);
    }

    function _addMainAdmin(address account, string memory _role) internal {
        _mainadmin.add(account, _role);
        emit MainAdminAdded(account);
    }
}
