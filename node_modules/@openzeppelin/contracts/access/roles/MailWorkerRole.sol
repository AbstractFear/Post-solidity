pragma solidity >=0.5.0;

import "../../GSN/Context.sol";
import "../Roles.sol";

contract MailWorkerRole is Context {
    using Roles for Roles.Role;

    event MailWorkerAdded(address indexed account, string indexed role);
    event MailWorkerRemoved(address indexed account);

    Roles.Role private _mailworkers;

    string constant _role = 'Сотрудник почтового отделения';

    constructor () internal {
        _addMailWorker(_msgSender());
    }

    modifier onlyMailWorker() {
        require(isMailWorker(_msgSender()), "MailWorkerRole: caller does not have the MailWorker role");
        _;
    }

    function isMailWorker(address account) public view returns (bool) {
        return _mailworkers.has(account);
    }

    function addMailWorker(address account) public onlyMailWorker {
        _addMailWorker(account, _role);
    }

    function renounceMailWorker() public {
        _removeMailWorker(_msgSender());
    }

    function _addMailWorker(address account, string memory _role) internal {
        _mailworkers.add(account, _role);
        emit MailWorkerAdded(account, _role);
    }

    function _removeMailWorker(address account) internal {
        _mailworkers.remove(account);
        emit MailWorkerRemoved(account);
    }
}
